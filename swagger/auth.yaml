/api/v1/auth/token:
    post:
      tags:
        - Authorizations
      summary: Get user token
      description: Get user token
      requestBody:
        description: Oauth Body as object
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/requestBodies/RequestTokenPassword"
                - $ref: "#/components/requestBodies/RequestTokenRefresh"
                - $ref: "#/components/requestBodies/RequestToken3Party"
            example:
              username: admin@oauth.com
              password: '1234'
              grant_type: password
      responses:
        "200":
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ResponseToken"
        "400":
          description: Error Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/ErrorResponse"
/api/v1/auth/verify:
  get:
    tags:
      - Authorizations
    security:
      - bearerAuth: []
    summary: Get user information with token header
    responses:
      "200":
        description: A successful response
/api/v1/auth/role/search:
  post:
    tags:
      - Authorizations
    security:
      - bearerAuth: []
    summary: Search role
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/requestBodies/RoleSearch"
    responses:
      "200":
        description: A successful response
/api/v1/auth/role/list:
  get:
    tags:
      - Authorizations
    summary: Get all Role
    security:
      - bearerAuth: []
    responses:
      '200':
        description: A successful response
/api/v1/auth/role/create:
  post:
      tags:
        - Authorizations
      summary: Create Role
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/role/update/{roleId}:
  patch:
      tags:
        - Authorizations
      summary: Update Role By roleId
      parameters:
        - in: path
          name: roleId
          required: true
          description: 'Input roleId as number'
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/role/delete/{roleId}:
  delete:
      tags:
        - Authorizations
      summary: Delete Role By roleId
      parameters:
        - in: path
          name: roleId
          required: true
          description: 'Input roleId as number'
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response
/api/v1/auth/permission/search:
  post:
    tags:
      - Authorizations
    security:
      - bearerAuth: []
    summary: Search permission
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/requestBodies/PermissionSearch"
    responses:
      "200":
        description: A successful response
/api/v1/auth/permission/list:
  get:
    tags:
      - Authorizations
    summary: Get all Permission
    security:
      - bearerAuth: []
    responses:
      '200':
        description: A successful response
/api/v1/auth/permission/create:
  post:
      tags:
        - Authorizations
      summary: Create Permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/permission/update/{permissionCode}:
  patch:
      tags:
        - Authorizations
      summary: Update Permission By permissionCode
      parameters:
        - in: path
          name: permissionCode
          required: true
          description: 'Input permissionCode as string'
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/permission/delete/{permissionCode}:
  delete:
      tags:
        - Authorizations
      summary: Delete Role By permissionCode
      parameters:
        - in: path
          name: permissionCode
          required: true
          description: 'Input permissionCode as string'
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response
/api/v1/auth/role-permission/search:
  post:
    tags:
      - Authorizations
    security:
      - bearerAuth: []
    summary: Search role permission
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/requestBodies/RolePermissionSearch"
    responses:
      "200":
        description: A successful response
/api/v1/auth/role-permission/list:
  get:
    tags:
      - Authorizations
    summary: Get all Role Permission
    security:
      - bearerAuth: []
    responses:
      '200':
        description: A successful response
/api/v1/auth/role-permission/create/bulk:
  post:
      tags:
        - Authorizations
      summary: Create Role Permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RolePermissionModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/role-permission/create:
  post:
      tags:
        - Authorizations
      summary: Create Role Permission
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePermissionModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/role-permission/update/{rpId}:
  patch:
      tags:
        - Authorizations
      summary: Update Role Permission By id
      parameters:
        - in: path
          name: rpId
          required: true
          description: 'Input permissionCode as string'
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePermissionModel'
      responses:
        '200':
          description: A successful response
/api/v1/auth/role-permission/delete/{rpId}:
    delete:
        tags:
          - Authorizations
        summary: Delete Role By permissionCode
        parameters:
          - in: path
            name: rpId
            required: true
            description: 'Input rpId as number'
            schema:
              type: string
        security:
          - bearerAuth: []
        responses:
          '200':
            description: A successful response         

components:
  requestBodies:
    RequestToken:
      properties:
        username:
          type: string
        password:
          type: string
      required:  
        - username
        - password
    RoleSearch:
      properties:
        page:
          $ref: "#/components/schemas/PagingCriteria"
        criteria:
          type: object
          properties:
            role:
              type: string
    PermissionSearch:
      properties:
        page:
          $ref: "#/components/schemas/PagingCriteria"
        criteria:
          type: object
          properties:
            permission:
              type: string
    RolePermissionSearch:
      properties:
        page:
          $ref: "#/components/schemas/PagingCriteria"
        criteria:
          type: object
          properties:
            role_permission:
              type: string
    RequestTokenPassword:
      properties:
        username:
          type: string
        password:
          type: string
        grant_type:
          type: string
          example: password
      required:
        - grant_type
    RequestTokenRefresh:
      properties:
        refresh_token:
          type: string
        grant_type:
          type: string
          example: refresh_token
      required:
        - grant_type
    RequestToken3Party:
      properties:
        access_token:
          type: string
        grant_type:
          type: string
          enum:
            - line
            - google
      required:
        - grant_type
  responses:
    ResponseToken:
      properties:
        data:
          type: object
          properties:
            token:
              type: string
        statusCode:
          type: integer
        isSuccess:
          type: boolean
    ErrorResponse:
      properties:
        statusCode:
          type: integer
        isSuccess:
          type: boolean
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
  schemas:
    RoleModel:
      properties:
        role_code:
          type: string
        role_desc:
          type: string
        is_active:
          type: boolean
    PermissionModel:
      properties:
        permission_code:
          type: string
        permission_desc:
          type: string
        is_active:
          type: boolean
    RolePermissionModel:
      properties:
        role_id:
          type: integer
        permission_code:
          type: string
        is_active:
          type: boolean
